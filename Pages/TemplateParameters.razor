@page "/templateparameter/{TemplateId:int}/{ParamId:int}/{mode:int}";

@using DynamicControlCreation_blazor.Data;
@using DynamicControlCreation_blazor.Models.TemplatesAndParameters;
@inject TemplateService templateService;
@inject NavigationManager navigationManager;

<style>
    .tblTemplateParameter {
        width: 500px;
    }

    .tblTemplateParameter tr th,
    .tblTemplateParameter tr td {
        padding: 5px 10px;
        vertical-align: middle;
    }

    .tblTemplateParameter tr th:first-child,
    .tblTemplateParameter tr td:first-child {
        padding-left: 0;
    }

    .tblTemplateParameter tr th:last-child,
    .tblTemplateParameter tr td:last-child {
        padding-right: 0;
    }
</style>

<h1>Template Parameter</h1>
<a class="btn btn-sm btn-primary mt-3" href="/template/@TemplateId">Back</a>

@if (mode == 1)
{
    <EditForm Model="@templateParameter" OnValidSubmit="@OnSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <table class="tblTemplateParameter mt-3">
            <tr>
                <td>Template Id</td>
                <td>@TemplateId</td>
            </tr>
            <tr>
                <td>Name</td>
                <td>
                    <InputText id="name" class="form-control" aria-placeholder="Template parameter name"
                    placeholder="Template parameter name" @bind-Value="templateParameter.Name"></InputText>
                </td>
            </tr>
            <tr>
                <td>Param type</td>
                <td>
                    <InputSelect id="type" class="form-control" @bind-Value="templateParameter.Type">
                        @foreach (var type in Enum.GetValues(typeof(TemplateParameterType)))
                        {
                        <option value="@((int)type)">@type.ToString()</option>
                        }
                </InputSelect>
            </td>
        </tr>
        <tr>
            <td>Allow multiple values</td>
            <td>
                <InputCheckbox @bind-Value="templateParameter.AllowMultiple"></InputCheckbox>
            </td>
        </tr>
    </table>
    <button type="submit" class="btn btn-sm btn-primary">Save Parameter</button>
</EditForm>
    @if ( (templateParameter.Type == (int)TemplateParameterType.String ||
   templateParameter.Type == (int)TemplateParameterType.Integer))
    {
        <table class="tblTemplateParameter mt-3">            
            <tr>
                <td colspan="2">
                    Available values:
                    <div>
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Label</th>
                                    <th>Value</th>
                                    <th>Display Index</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var paramValue in templateParameter.ParameterValues)
                                {
                                    <tr>
                                        <td>
                                            <input type="text" @bind="@paramValue.Label" />
                                        </td>
                                        <td>
                                            <input type="text" @bind="@paramValue.Value" />
                                        </td>
                                        <td>
                                            <input type="number" @bind="@paramValue.DisplayIndex" />
                                        </td>
                                        <td>
                                            <div class="text-nowrap">
                                                <span title="Save" class="oi oi-cloud-upload pointer mr-3"
                                    @onclick="() => saveParameterValue(paramValue)"></span>
                                                <span title="Delete" class="oi oi-delete pointer"
                                    @onclick="() => saveParameterValue(paramValue, true)"></span>
                                            </div>
                                        </td>
                                    </tr>
                                }

                                @if (templateParameter.ParameterValues.Count == 0)
                                {
                                    <tr>
                                        <td colspan="4">No Records Available</td>
                                    </tr>
                                }

                                <tr>
                                    <td>
                                        <input type="text" @bind="@addTemplateParameterValues.Label" />
                                    </td>
                                    <td>
                                        <input type="text" @bind="@addTemplateParameterValues.Value" />
                                    </td>
                                    <td>
                                        <input type="number" @bind="@addTemplateParameterValues.DisplayIndex" />
                                    </td>
                                    <td>
                                        <span title="Save" class="oi oi-cloud-upload pointer"
                                @onclick="() => saveParameterValue(addTemplateParameterValues)"></span>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </td>
            </tr>            
            <tr>
                <td colspan="2">
                    Default values:
                    <div>
                        <table class="table">
                            <tr>
                                <th>Value</th>
                                <th>Action</th>
                            </tr>
                            <tbody>
                                @foreach (var paramDefault in templateParameter.ParameterDefaults)
                                {
                                    <tr>
                                        <td>
                                            <input type="text" @bind="@paramDefault.Value" />
                                        </td>
                                        <td>
                                            <div class="text-nowrap">
                                                <span title="Save" class="oi oi-cloud-upload pointer mr-3"
                                        @onclick="() => saveParameterDefault(paramDefault)"></span>
                                                <span title="Delete" class="oi oi-delete pointer"
                                        @onclick="() => saveParameterDefault(paramDefault, true)"></span>
                                            </div>
                                        </td>
                                    </tr>
                                }

                                @if (templateParameter.ParameterDefaults.Count == 0)
                                {
                                    <tr>
                                        <td colspan="2">No Records Available</td>
                                    </tr>
                                }
                                <tr>
                                    <td>
                                        <input type="text" @bind="@addTemplateParameterDefaults.Value" />
                                    </td>
                                    <td>
                                        <span title="Save" class="oi oi-cloud-upload pointer"
                                    @onclick="() => saveParameterDefault(addTemplateParameterDefaults)"></span>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </td>
            </tr>
        </table>
    }
}
else if (mode == 0)
{
    <table class="tblTemplateParameter mt-3">
        <tr>
            <td>Template ID</td>
            <td>@TemplateId</td>
        </tr>
        <tr>
            <td>Name</td>
            <td>@templateParameter.Name</td>
        </tr>
        <tr>
            <td>Value</td>
            <td>
                <FormControl Model="@templateParameter" />
            </td>
        </tr>
    </table>
}

@code {
    [Parameter]
    public int TemplateId { get; set; }

    [Parameter]
    public int ParamId { get; set; }

    [Parameter]
    public int mode { get; set; }

    private TemplateParameter templateParameter;
    private TemplateParameterValues addTemplateParameterValues = new TemplateParameterValues();
    private TemplateParameterDefaults addTemplateParameterDefaults = new TemplateParameterDefaults();

    protected override async Task OnInitializedAsync()
    {
        templateParameter = await templateService.GetParameter(TemplateId, ParamId);
    }

    private async void OnSubmit()
    {
        bool isSaved = await templateService.SaveTemplateParameter(templateParameter);
        if (isSaved)
        {
            navigationManager.NavigateTo("/template/" + templateParameter.TemplateID);
        }
    }

    private async Task saveParameterValue(TemplateParameterValues templateParameterValues, bool isDeleted = false)
    {
        if (templateParameterValues.ID == 0)
        {
            templateParameterValues.TemplateParameterID = templateParameter.TemplateParameterID;
            templateParameter.ParameterValues.Add(templateParameterValues);
        }
        else
        {
            int index = templateParameter.ParameterValues.IndexOf(templateParameterValues);
            templateParameter.ParameterValues[index].Label = templateParameterValues.Label;
            templateParameter.ParameterValues[index].Value = templateParameterValues.Value;
            templateParameter.ParameterValues[index].DisplayIndex = templateParameterValues.DisplayIndex;
            templateParameter.ParameterValues[index].Deleted = isDeleted;
        }
        bool isSaved = await templateService.SaveTemplateParameter(templateParameter);
        if (isSaved)
        {
            addTemplateParameterValues = new TemplateParameterValues();
        }
    }

    private async Task saveParameterDefault(TemplateParameterDefaults templateParameterDefaults, bool isDeleted = false)
    {
        if (templateParameterDefaults.ID == 0)
        {
            templateParameterDefaults.TemplateParameterID = templateParameter.TemplateParameterID;
            templateParameter.ParameterDefaults.Add(templateParameterDefaults);
        }
        else
        {
            int index = templateParameter.ParameterDefaults.IndexOf(templateParameterDefaults);
            templateParameter.ParameterDefaults[index].Value = templateParameterDefaults.Value;
            templateParameter.ParameterDefaults[index].Deleted = isDeleted;
        }
        bool isSaved = await templateService.SaveTemplateParameter(templateParameter);
        if (isSaved)
        {
            addTemplateParameterDefaults = new TemplateParameterDefaults();
        }
    }
}